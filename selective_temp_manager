"""
Seçici Temp Dosya Yöneticisi
Sadece HTML tarayıcı raporları ve Word okuma hatası temp dosyalarını yönetir
Normal rapor sistemi değişmez
"""
import os
import tempfile
import atexit
import shutil
import glob
import threading
import time
from pathlib import Path
from typing import Set
import datetime

class SelectiveTempManager:
    """Sadece belirli temp dosya türlerini yöneten sınıf"""
    
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls):
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(SelectiveTempManager, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        if not hasattr(self, 'initialized'):
            # Sadece belirli kategoriler için temp takibi
            self.browser_temp_files: Set[str] = set()  # HTML tarayıcı dosyaları
            self.word_error_temp_files: Set[str] = set()  # Word okuma hatası temp dosyaları
            self.cleanup_registered = False
            
            # Program başlatıldığında eski temp dosyaları temizle
            self._cleanup_old_browser_temps()
            
            # Program kapatılırken temizlik kaydet
            self._register_cleanup()
            
            self.initialized = True
            print("🎯 Seçici Temp Yöneticisi başlatıldı (sadece tarayıcı ve Word hata dosyaları)")
    
    def _register_cleanup(self):
        """Program kapatılırken temizlik fonksiyonunu kaydet"""
        if not self.cleanup_registered:
            atexit.register(self.cleanup_selective_temps)
            self.cleanup_registered = True
    
    def _cleanup_old_browser_temps(self):
        """Program başlatılırken eski tarayıcı temp dosyalarını temizle"""
        try:
            temp_dir = tempfile.gettempdir()
            
            # Sadece belirli prefix'leri temizle
            patterns = [
                "DigitalIRS_browser_*.html",
                "DigitalIRS_quick_report_*.html", 
                "DigitalIRS_word_fixed_*.docx",
                "DigitalIRS_headerless_*.docx"
            ]
            
            cleaned_count = 0
            for pattern in patterns:
                full_pattern = os.path.join(temp_dir, pattern)
                old_files = glob.glob(full_pattern)
                
                for file_path in old_files:
                    try:
                        if os.path.isfile(file_path) and self._is_file_old(file_path, hours=24):
                            os.remove(file_path)
                            cleaned_count += 1
                    except Exception as e:
                        print(f"⚠ Eski temp dosyası silinemedi {file_path}: {e}")
            
            if cleaned_count > 0:
                print(f"🧹 {cleaned_count} eski tarayıcı/Word temp dosyası temizlendi")
                
        except Exception as e:
            print(f"⚠ Eski temp temizleme hatası: {e}")
    
    def _is_file_old(self, file_path: str, hours: int = 24) -> bool:
        """Dosyanın belirtilen saatten eski olup olmadığını kontrol eder"""
        try:
            file_time = os.path.getmtime(file_path)
            current_time = time.time()
            return (current_time - file_time) > (hours * 3600)
        except:
            return False
    
    def create_browser_temp_file(self, content: str, suffix: str = ".html") -> str:
        """Tarayıcıda açılacak HTML dosyası için temp dosya oluştur"""
        try:
            with tempfile.NamedTemporaryFile(
                mode='w', 
                suffix=suffix, 
                prefix='DigitalIRS_browser_', 
                delete=False,
                encoding='utf-8'
            ) as temp_file:
                temp_path = temp_file.name
                temp_file.write(content)
            
            self.browser_temp_files.add(temp_path)
            print(f"🌐 Tarayıcı temp dosyası oluşturuldu: {os.path.basename(temp_path)}")
            return temp_path
            
        except Exception as e:
            print(f"HATA: Tarayıcı temp dosya oluşturma hatası: {e}")
            raise
    
    def register_word_error_temp(self, file_path: str):
        """Word okuma hatası için oluşturulan temp dosyasını kaydet"""
        if os.path.exists(file_path):
            self.word_error_temp_files.add(file_path)
            print(f"📄 Word hata temp dosyası kaydedildi: {os.path.basename(file_path)}")
    
    def create_word_error_temp(self, suffix: str = ".docx", prefix: str = "word_fixed_") -> str:
        """Word okuma hatası için temp dosya oluştur"""
        try:
            with tempfile.NamedTemporaryFile(
                suffix=suffix, 
                prefix=f'DigitalIRS_{prefix}', 
                delete=False
            ) as temp_file:
                temp_path = temp_file.name
            
            self.word_error_temp_files.add(temp_path)
            print(f"🔧 Word hata temp dosyası oluşturuldu: {os.path.basename(temp_path)}")
            return temp_path
            
        except Exception as e:
            print(f"HATA: Word hata temp dosya oluşturma hatası: {e}")
            raise
    
    def cleanup_selective_temps(self):
        """Sadece seçili temp dosyaları temizle"""
        print("🎯 Seçici temp dosya temizliği başlatılıyor...")
        
        cleaned_browser = 0
        cleaned_word_error = 0
        
        # Tarayıcı temp dosyalarını temizle
        for file_path in list(self.browser_temp_files):
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    cleaned_browser += 1
                    print(f"🗑️ Tarayıcı temp silindi: {os.path.basename(file_path)}")
                self.browser_temp_files.remove(file_path)
            except Exception as e:
                print(f"⚠ Tarayıcı temp silinemedi {file_path}: {e}")
        
        # Word hata temp dosyalarını temizle
        for file_path in list(self.word_error_temp_files):
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    cleaned_word_error += 1
                    print(f"🗑️ Word hata temp silindi: {os.path.basename(file_path)}")
                self.word_error_temp_files.remove(file_path)
            except Exception as e:
                print(f"⚠ Word hata temp silinemedi {file_path}: {e}")
        
        total_cleaned = cleaned_browser + cleaned_word_error
        if total_cleaned > 0:
            print(f"✅ Seçici temp temizlik tamamlandı: {cleaned_browser} tarayıcı, {cleaned_word_error} Word hata dosyası")
        else:
            print("✅ Temizlenecek temp dosyası bulunamadı")
    
    def get_temp_status(self) -> dict:
        """Temp dosya durumunu döner"""
        browser_size = 0
        word_error_size = 0
        browser_existing = 0
        word_error_existing = 0
        
        # Tarayıcı dosyalarını kontrol et
        for file_path in self.browser_temp_files:
            if os.path.exists(file_path):
                try:
                    browser_size += os.path.getsize(file_path)
                    browser_existing += 1
                except:
                    pass
        
        # Word hata dosyalarını kontrol et
        for file_path in self.word_error_temp_files:
            if os.path.exists(file_path):
                try:
                    word_error_size += os.path.getsize(file_path)
                    word_error_existing += 1
                except:
                    pass
        
        return {
            'browser_files_total': len(self.browser_temp_files),
            'browser_files_existing': browser_existing,
            'browser_size_mb': browser_size / (1024 * 1024),
            'word_error_files_total': len(self.word_error_temp_files),
            'word_error_files_existing': word_error_existing,
            'word_error_size_mb': word_error_size / (1024 * 1024),
            'total_size_mb': (browser_size + word_error_size) / (1024 * 1024),
            'temp_directory': tempfile.gettempdir()
        }

# Singleton instance
selective_temp_manager = SelectiveTempManager()

# HeaderlessWordReader'ı güncelleyin
class UpdatedHeaderlessWordReader:
    """Header/Footer'sız Word okuyucu - seçici temp yönetimi ile"""
    
    def __init__(self):
        self.current_document = None
        self.raw_xml_content = None
        self.temp_manager = selective_temp_manager
    
    def load_document_without_headers(self, file_path: str) -> bool:
        """Word dosyasını header/footer'lar olmadan yükler"""
        try:
            print(f"Header/Footer'sız Word yükleme deneniyor: {file_path}")
            
            # Önce normal yüklemeyi dene
            try:
                from docx import Document
                doc = Document(file_path)
                self.current_document = doc
                print(f"✓ Normal Word dosyası yüklendi: {file_path}")
                return True
            except Exception as normal_error:
                print(f"⚠ Normal yükleme başarısız: {normal_error}")
                
                # Header/footer hatası mı kontrol et
                error_msg = str(normal_error).lower()
                if any(keyword in error_msg for keyword in ['header', 'footer', 'relationship', 'null']):
                    print("🔧 Header/Footer corruption tespit edildi, headerless yükleme deneniyor...")
                    return self._load_without_problematic_parts(file_path)
                else:
                    print(f"HATA: Bilinmeyen Word hatası: {normal_error}")
                    return False
                    
        except Exception as e:
            print(f"HATA: Genel Word yükleme hatası: {e}")
            return False

    def _load_without_problematic_parts(self, file_path: str) -> bool:
        """Problematik header/footer'ları temizleyerek yükle"""
        try:
            # Temp dosya oluştur - seçici temp yöneticisi ile
            temp_path = self.temp_manager.create_word_error_temp(suffix='.docx', prefix='headerless_')
            
            try:
                # DOCX dosyasını ZIP olarak aç ve temizle
                success = self._create_clean_docx(file_path, temp_path)
                
                if success:
                    # Temizlenmiş dosyayı yükle
                    from docx import Document
                    doc = Document(temp_path)
                    self.current_document = doc
                    print(f"✓ Headerless Word dosyası başarıyla yüklendi")
                    return True
                else:
                    # Son çare: XML'i direkt oku
                    return self._load_from_raw_xml(file_path)
                    
            except Exception as load_error:
                print(f"Temizlenmiş dosya yükleme hatası: {load_error}")
                # Son çare: XML'i direkt oku
                return self._load_from_raw_xml(file_path)
                    
        except Exception as e:
            print(f"HATA: Headerless yükleme hatası: {e}")
            return self._load_from_raw_xml(file_path)

    def _create_clean_docx(self, input_path: str, output_path: str) -> bool:
        """Header/Footer'ları temizlenmiş DOCX oluştur"""
        try:
            import zipfile
            
            with zipfile.ZipFile(input_path, 'r') as zip_in:
                with zipfile.ZipFile(output_path, 'w', zipfile.ZIP_DEFLATED) as zip_out:
                    
                    for item in zip_in.infolist():
                        # Problematik dosyaları atla
                        if self._should_skip_file(item.filename):
                            print(f"    Atlanıyor: {item.filename}")
                            continue
                        
                        # Relationship dosyalarını temizle
                        if item.filename.endswith('.rels'):
                            cleaned_content = self._clean_rels_content(zip_in.read(item))
                            if cleaned_content:
                                zip_out.writestr(item, cleaned_content)
                            else:
                                print(f"    Boş rels dosyası atlandı: {item.filename}")
                        else:
                            # Normal dosyaları kopyala
                            zip_out.writestr(item, zip_in.read(item))
            
            print("✓ Temizlenmiş DOCX oluşturuldu")
            return True
            
        except Exception as e:
            print(f"HATA: Clean DOCX oluşturma hatası: {e}")
            return False

    def _should_skip_file(self, filename: str) -> bool:
        """Hangi dosyaların atlanacağını belirler"""
        skip_patterns = [
            'word/header',
            'word/footer', 
            'word/endnotes.xml',
            'word/footnotes.xml',
            'word/comments.xml',
            'word/webSettings.xml'
        ]
        
        filename_lower = filename.lower()
        return any(pattern in filename_lower for pattern in skip_patterns)

    def _clean_rels_content(self, rels_content: bytes) -> bytes:
        """Relationship içeriğini temizler"""
        try:
            content_str = rels_content.decode('utf-8')
            
            lines = content_str.split('\n')
            cleaned_lines = []
            
            for line in lines:
                if (any(bad_ref in line for bad_ref in ['../NULL', '"NULL"', 'header', 'footer']) or
                    'Target="#_' in line):
                    print(f"      Problematik rels satırı temizlendi")
                    continue
                cleaned_lines.append(line)
            
            return '\n'.join(cleaned_lines).encode('utf-8')
            
        except Exception as e:
            print(f"UYARI: Rels temizleme hatası: {e}")
            return rels_content

    def _load_from_raw_xml(self, file_path: str) -> bool:
        """Son çare: Raw XML'den document.xml'i oku"""
        try:
            print("📄 Son çare: Raw XML okuma deneniyor...")
            
            import zipfile
            import xml.etree.ElementTree as ET
            
            with zipfile.ZipFile(file_path, 'r') as zip_file:
                try:
                    document_xml = zip_file.read('word/document.xml')
                    self.raw_xml_content = document_xml.decode('utf-8')
                    
                    # Basit Document objesi oluştur (sadece tablolar için)
                    self.current_document = self._create_minimal_document(document_xml)
                    
                    print("✓ Raw XML'den minimal document oluşturuldu")
                    return True
                    
                except KeyError:
                    print("HATA: document.xml bulunamadı")
                    return False
                    
        except Exception as e:
            print(f"HATA: Raw XML okuma hatası: {e}")
            return False

    def _create_minimal_document(self, document_xml: bytes):
        """Minimal Document objesi oluştur (sadece tablolar için)"""
        try:
            import xml.etree.ElementTree as ET
            
            root = ET.fromstring(document_xml)
            
            namespaces = {
                'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'
            }
            
            tables = root.findall('.//w:tbl', namespaces)
            print(f"Raw XML'de {len(tables)} tablo bulundu")
            
            class MinimalDocument:
                def __init__(self, table_elements):
                    self.tables = [MinimalTable(tbl, namespaces) for tbl in table_elements]
            
            return MinimalDocument(tables)
            
        except Exception as e:
            print(f"HATA: Minimal document oluşturma hatası: {e}")
            return None

class MinimalTable:
    """Raw XML'den minimal tablo objesi"""
    
    def __init__(self, table_element, namespaces):
        self.rows = []
        self._parse_table(table_element, namespaces)
    
    def _parse_table(self, table_element, namespaces):
        """Tablo elementini parse et"""
        try:
            row_elements = table_element.findall('.//w:tr', namespaces)
            
            for row_elem in row_elements:
                cells = []
                cell_elements = row_elem.findall('.//w:tc', namespaces)
                
                for cell_elem in cell_elements:
                    text_elements = cell_elem.findall('.//w:t', namespaces)
                    cell_text = ''.join([t.text or '' for t in text_elements])
                    cells.append(MinimalCell(cell_text))
                
                if cells:
                    self.rows.append(MinimalRow(cells))
                    
        except Exception as e:
            print(f"UYARI: Tablo parse hatası: {e}")

class MinimalRow:
    """Minimal satır objesi"""
    def __init__(self, cells):
        self.cells = cells

class MinimalCell:
    """Minimal hücre objesi"""
    def __init__(self, text):
        self.text = text
        self.paragraphs = [MinimalParagraph(text)]

class MinimalParagraph:
    """Minimal paragraf objesi"""
    def __init__(self, text):
        self.text = text

# Lot Report Generator için browser temp fonksiyonu
def create_browser_html_report(content: str, title: str = "Rapor") -> str:
    """Tarayıcıda açılacak HTML raporu oluştur (seçici temp ile)"""
    html_template = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{title}</title>
    <style>
        body {{ font-family: Arial; margin: 20px; }}
        .header {{ background: #f0f0f0; padding: 15px; border-radius: 8px; }}
        .content {{ padding: 20px; }}
        .temp-warning {{ 
            background: #fff3cd; 
            border: 1px solid #ffeaa7; 
            padding: 10px; 
            border-radius: 5px; 
            margin: 10px 0;
            color: #856404;
        }}
    </style>
</head>
<body>
    <div class="temp-warning">
        ⚠️ Bu dosya geçici klasördedir ve program kapatılırken otomatik silinecektir.
    </div>
    <div class="header">
        <h1>{title}</h1>
        <p>Oluşturulma: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
    </div>
    <div class="content">
        {content}
    </div>
</body>
</html>
    """
    
    return selective_temp_manager.create_browser_temp_file(html_template)

def open_temp_file_in_browser(file_path: str):
    """Temp dosyasını tarayıcıda aç"""
    try:
        import webbrowser
        webbrowser.open(f'file://{os.path.abspath(file_path)}')
        print(f"🌐 Temp dosya tarayıcıda açıldı: {os.path.basename(file_path)}")
    except Exception as e:
        print(f"HATA: Tarayıcıda açma hatası: {e}")

# Ana uygulamaya entegrasyon için
class EnhancedMainWindowWithSelectiveTemp:
    """Ana pencere - seçici temp temizlik ile"""
    
    def __init__(self):
        # ... mevcut init kodları değişmez ...
        self.selective_temp_manager = selective_temp_manager
        
        # Pencere kapatma event'ini ayarla
        self.protocol("WM_DELETE_WINDOW", self.on_closing_with_selective_temp_cleanup)
        
        print("🎯 Ana pencere seçici temp yönetimi ile başlatıldı")
    
    def on_closing_with_selective_temp_cleanup(self):
        """Pencere kapatılırken seçici temp temizlik ile"""
        try:
            print("🔄 Program kapatılıyor, temp dosyalar kontrol ediliyor...")
            
            # Temp bilgilerini al
            temp_status = self.selective_temp_manager.get_temp_status()
            
            total_existing = temp_status['browser_files_existing'] + temp_status['word_error_files_existing']
            
            if total_existing > 0:
                print(f"📊 Bulundu: {temp_status['browser_files_existing']} tarayıcı, {temp_status['word_error_files_existing']} Word temp dosyası ({temp_status['total_size_mb']:.2f} MB)")
                
                # Kullanıcıya sor (opsiyonel)
                try:
                    from tkinter import messagebox
                    response = messagebox.askyesno(
                        "Geçici Dosya Temizliği", 
                        f"Program tarafından oluşturulan geçici dosyalar:\n\n"
                        f"🌐 {temp_status['browser_files_existing']} tarayıcı raporu\n"
                        f"📄 {temp_status['word_error_files_existing']} Word düzeltme dosyası\n"
                        f"💾 Toplam: {temp_status['total_size_mb']:.2f} MB\n\n"
                        f"Bu dosyalar silinsin mi?\n"
                        f"(Normal raporlarınız silinmeyecektir)"
                    )
                    
                    if response:
                        self.selective_temp_manager.cleanup_selective_temps()
                        print("✅ Kullanıcı onayı ile seçici temp dosyalar temizlendi")
                    else:
                        print("⚠ Kullanıcı temp temizliği iptal etti")
                        
                except Exception as dialog_error:
                    print(f"Dialog hatası: {dialog_error}")
                    # Dialog başarısızsa otomatik temizle
                    self.selective_temp_manager.cleanup_selective_temps()
                    print("✅ Dialog hatası nedeniyle otomatik temizlendi")
            else:
                print("✅ Temizlenecek temp dosyası yok")
            
            # Diğer temizlik işlemleri (değişmez)
            self.perform_other_cleanup()
            
            # Pencereyi kapat
            self.destroy()
            
        except Exception as e:
            print(f"HATA: Kapatma sırasında hata: {e}")
            try:
                self.destroy()
            except:
                import sys
                sys.exit()

# Test fonksiyonu
def test_selective_temp_management():
    """Seçici temp yönetim sistemini test eder"""
    print("=== SELECTİVE TEMP MANAGEMENT TEST ===")
    
    # Test tarayıcı HTML dosyası oluştur
    html_content = "<h2>Test HTML raporu</h2><p>Bu bir test tarayıcı içeriğidir.</p>"
    browser_file = create_browser_html_report(html_content, "Test Tarayıcı Raporu")
    
    # Test Word hata dosyası oluştur
    word_error_file = selective_temp_manager.create_word_error_temp()
    
    # Durum göster
    status = selective_temp_manager.get_temp_status()
    print(f"""
🎯 SELECTİVE TEMP DURUMU:
  🌐 Tarayıcı dosyaları: {status['browser_files_existing']}/{status['browser_files_total']} ({status['browser_size_mb']:.2f} MB)
  📄 Word hata dosyaları: {status['word_error_files_existing']}/{status['word_error_files_total']} ({status['word_error_size_mb']:.2f} MB)
  💾 Toplam boyut: {status['total_size_mb']:.2f} MB
    """)
    
    # Tarayıcıda aç
    open_temp_file_in_browser(browser_file)
    
    # 5 saniye sonra temizlik
    print("\n5 saniye sonra seçici temizlik yapılacak...")
    time.sleep(5)
    selective_temp_manager.cleanup_selective_temps()
    
    print("✅ Test tamamlandı")

if __name__ == "__main__":
    test_selective_temp_management()
