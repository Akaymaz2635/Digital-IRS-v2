"""
SharePoint Word dosyasÄ± okuma hatasÄ± iÃ§in Ã§Ã¶zÃ¼m
word_reader.py dosyasÄ±na eklenecek kodlar
"""
import os
import tempfile
import zipfile
from docx import Document
from docx.opc.oxml import parse_xml
from docx.opc.pkgreader import _SerializedRelationship, _SerializedRelationships
from typing import List

# GitHub Ã§Ã¶zÃ¼mÃ¼nÃ¼ uyarlayalÄ±m
def load_from_xml_v2(baseURI, rels_item_xml):
    """
    SharePoint hatasÄ± iÃ§in Ã¶zel XML parser
    Return |_SerializedRelationships| instance loaded with the
    relationships contained in *rels_item_xml*. Returns an empty
    collection if *rels_item_xml* is |None|.
    """
    srels = _SerializedRelationships()
    if rels_item_xml is not None:
        rels_elm = parse_xml(rels_item_xml)
        for rel_elm in rels_elm.Relationship_lst:
            if (
                rel_elm.target_ref in ("../NULL", "NULL")
                or rel_elm.target_ref.startswith("#_")  # Internal bookmark
            ):
                continue
            srels._srels.append(_SerializedRelationship(baseURI, rel_elm))
    return srels

# Monkey patch uygula
_SerializedRelationships.load_from_xml = load_from_xml_v2

class SharePointWordFixer:
    """SharePoint Word dosyalarÄ±nÄ± dÃ¼zeltmek iÃ§in yardÄ±mcÄ± sÄ±nÄ±f"""
    
    @staticmethod
    def is_sharepoint_corrupted(file_path: str) -> bool:
        """DosyanÄ±n SharePoint corruption'Ä± olup olmadÄ±ÄŸÄ±nÄ± kontrol eder"""
        try:
            # Basit test - dosyayÄ± aÃ§maya Ã§alÄ±ÅŸ
            Document(file_path)
            return False
        except Exception as e:
            error_msg = str(e).lower()
            return any(keyword in error_msg for keyword in [
                'word/header', 'word/footer', 'relationship', 'target_ref', 'null'
            ])
    
    @staticmethod
    def fix_sharepoint_docx(input_path: str, output_path: str = None) -> str:
        """
        SharePoint'ten bozulmuÅŸ Word dosyasÄ±nÄ± dÃ¼zeltir
        
        Args:
            input_path: Bozuk dosya yolu
            output_path: DÃ¼zeltilmiÅŸ dosya yolu (None ise temp dosya)
            
        Returns:
            str: DÃ¼zeltilmiÅŸ dosyanÄ±n yolu
        """
        if not output_path:
            # GeÃ§ici dosya oluÅŸtur
            temp_dir = tempfile.gettempdir()
            filename = os.path.basename(input_path)
            name_without_ext = os.path.splitext(filename)[0]
            output_path = os.path.join(temp_dir, f"{name_without_ext}_fixed.docx")
        
        try:
            print(f"SharePoint Word dosyasÄ± dÃ¼zeltiliyor: {input_path}")
            
            # ZIP olarak aÃ§ (DOCX aslÄ±nda bir ZIP dosyasÄ±dÄ±r)
            with zipfile.ZipFile(input_path, 'r') as zip_ref:
                # GeÃ§ici klasÃ¶r oluÅŸtur
                with tempfile.TemporaryDirectory() as temp_dir:
                    # TÃ¼m dosyalarÄ± Ã§Ä±kar
                    zip_ref.extractall(temp_dir)
                    
                    # Relationship dosyalarÄ±nÄ± dÃ¼zelt
                    rels_dir = os.path.join(temp_dir, 'word', '_rels')
                    if os.path.exists(rels_dir):
                        for rels_file in os.listdir(rels_dir):
                            if rels_file.endswith('.rels'):
                                rels_path = os.path.join(rels_dir, rels_file)
                                SharePointWordFixer._fix_rels_file(rels_path)
                    
                    # Ana _rels klasÃ¶rÃ¼nÃ¼ de kontrol et
                    main_rels_dir = os.path.join(temp_dir, '_rels')
                    if os.path.exists(main_rels_dir):
                        for rels_file in os.listdir(main_rels_dir):
                            if rels_file.endswith('.rels'):
                                rels_path = os.path.join(main_rels_dir, rels_file)
                                SharePointWordFixer._fix_rels_file(rels_path)
                    
                    # DÃ¼zeltilmiÅŸ dosyayÄ± yeniden zip'le
                    with zipfile.ZipFile(output_path, 'w', zipfile.ZIP_DEFLATED) as zip_out:
                        for root, dirs, files in os.walk(temp_dir):
                            for file in files:
                                file_path = os.path.join(root, file)
                                arcname = os.path.relpath(file_path, temp_dir)
                                zip_out.write(file_path, arcname)
            
            print(f"âœ“ SharePoint Word dosyasÄ± dÃ¼zeltildi: {output_path}")
            return output_path
            
        except Exception as e:
            print(f"HATA: SharePoint dÃ¼zeltme baÅŸarÄ±sÄ±z: {e}")
            raise
    
    @staticmethod
    def _fix_rels_file(rels_file_path: str):
        """Relationship dosyasÄ±ndaki NULL referanslarÄ± temizler"""
        try:
            with open(rels_file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Bozuk referanslarÄ± temizle
            lines = content.split('\n')
            fixed_lines = []
            
            for line in lines:
                # NULL referanslarÄ± ve internal bookmark'larÄ± atla
                if ('Target="../NULL"' in line or 
                    'Target="NULL"' in line or 
                    'Target="#_' in line):
                    print(f"    Bozuk referans kaldÄ±rÄ±ldÄ±: {line.strip()}")
                    continue
                fixed_lines.append(line)
            
            # DÃ¼zeltilmiÅŸ iÃ§eriÄŸi yaz
            fixed_content = '\n'.join(fixed_lines)
            with open(rels_file_path, 'w', encoding='utf-8') as f:
                f.write(fixed_content)
                
        except Exception as e:
            print(f"UYARI: Rels dosyasÄ± dÃ¼zeltilirken hata: {e}")

class WordReaderService:
    def __init__(self):
        self.current_document = None

    def load_document(self, file_path: str) -> bool:
        """Word DosyasÄ±nÄ± YÃ¼kler - SharePoint dÃ¼zeltmesi ile"""
        try:
            # Ã–nce normal yÃ¼klemeyi dene
            try:
                doc = Document(file_path)
                self.current_document = doc
                print(f"âœ“ Word dosyasÄ± yÃ¼klendi: {file_path}")
                return True
            except Exception as e:
                error_msg = str(e)
                print(f"âš  Normal yÃ¼kleme baÅŸarÄ±sÄ±z: {error_msg}")
                
                # SharePoint hatasÄ± mÄ± kontrol et
                if any(keyword in error_msg.lower() for keyword in [
                    'word/header', 'word/footer', 'relationship', 'target_ref', 'null'
                ]):
                    print("ðŸ”§ SharePoint corruption tespit edildi, dÃ¼zeltme deneniyor...")
                    
                    # DosyayÄ± dÃ¼zelt ve tekrar dene
                    try:
                        fixed_path = SharePointWordFixer.fix_sharepoint_docx(file_path)
                        doc = Document(fixed_path)
                        self.current_document = doc
                        print(f"âœ“ SharePoint dÃ¼zeltmesi ile Word dosyasÄ± yÃ¼klendi: {file_path}")
                        
                        # GeÃ§ici dosyayÄ± temizle
                        try:
                            os.remove(fixed_path)
                        except:
                            pass
                        
                        return True
                    except Exception as fix_error:
                        print(f"HATA: SharePoint dÃ¼zeltmesi de baÅŸarÄ±sÄ±z: {fix_error}")
                        return False
                else:
                    # BaÅŸka bir hata
                    print(f"HATA: Word dosyasÄ± yÃ¼klenemedi - {e}")
                    return False
                    
        except Exception as e:
            print(f"HATA: Genel Word dosyasÄ± yÃ¼kleme hatasÄ± - {e}")
            return False

    def extract_tables(self, file_path: str) -> List:
        """
        Word iÃ§erisindeki TablolarÄ± Veri Toplar ve Liste Olarak DÃ¶ndÃ¼rÃ¼r
        SharePoint dÃ¼zeltmesi ile
        """
        print("Veri iÅŸleme baÅŸlÄ±yor...")
        
        # Header'Ä± ilk eleman olarak liste iÃ§inde tanÄ±mla
        headers = ["ITEM NO", "DIMENSION", "ACTUAL", "BADGE", "TOOLING", "REMARKS", "B/P ZONE", "INSP. LEVEL"]
        extracted_data = [headers]  # Ä°lk eleman header LÄ°STESÄ°
        
        try:
            # Word dokÃ¼manÄ±nÄ± yÃ¼kle (SharePoint dÃ¼zeltmesi ile)
            word_document = self.load_document(file_path=file_path)
            if not word_document:
                return []
            
            tables = self.current_document.tables
            print(f"  {len(tables)} tablo bulundu")
            
            for table_idx, table in enumerate(tables):
                print(f"  Tablo {table_idx + 1} iÅŸleniyor...")
                
                for row in table.rows:
                    row_data = []
                    for cell in row.cells:
                        # HÃ¼credeki tÃ¼m paragraflarÄ± birleÅŸtir
                        cell_text = '\n'.join([p.text for p in cell.paragraphs])
                        row_data.append(cell_text)
                    

                    # DEBUG: SatÄ±r verilerini kontrol et
                    print(f"    Debug - row_data uzunluÄŸu: {len(row_data)}")
                    if len(row_data) > 0:
                        print(f"    Debug - Ä°lk element: '{row_data[0]}'")

                        def char_check():
                            control = []
                            for listeler in extracted_data:
                                result = row_data[0] in listeler
                                result = str(result)
                                control.append(result)
                            print(control)
                            if "True" in control:
                                return True
                    
                    # Filtreleme mantÄ±ÄŸÄ±
                    if (len(row_data) > 4 and not (row_data[1].strip().endswith("Inch")
                                or row_data[1].strip().endswith("Inches")
                                or row_data[0].strip().endswith("ITEM NO KC")
                                or row_data[0].strip().endswith("ITEM NO")
                                or row_data[0].strip().endswith("RECORDING")
                                or row_data[0].strip().endswith("INSPECTION")
                                or row_data[0].strip().endswith("INSPECTOR")
                                or row_data[0].strip().endswith("/0")
                                or row_data[0].strip().endswith("**")
                                or row_data[0].strip().endswith("PAGE NO")
                                or char_check())):
                        row_data[1]=row_data[1].replace(",",".")                       
                        # SatÄ±rÄ± 8 kolona pad et veya kÄ±rp
                        padded_row = row_data + [''] * (len(headers) - len(row_data))
                        padded_row = padded_row[:len(headers)]
                        
                        extracted_data.append(padded_row)  # LÄ°STE ekleniyor
                        print(f"    âœ“ SatÄ±r eklendi: {row_data[0]} (kolon sayÄ±sÄ±: {len(padded_row)})")
            
            print(f"âœ“ Toplam {len(extracted_data) - 1} karakter Ã§Ä±karÄ±ldÄ±")
            print(f"Header: {extracted_data[0]}")
            if len(extracted_data) > 1:
                print(f"Ä°lk veri satÄ±rÄ±: {extracted_data[1]} (uzunluk: {len(extracted_data[1])})")
            
            return extracted_data
            
        except Exception as e:
            print(f"HATA: Tablo Ã§Ä±karma iÅŸleminde sorun: {e}")
            return []

# Test fonksiyonu
def test_sharepoint_fix():
    """SharePoint dÃ¼zeltmesini test eder"""
    test_file = "sharepoint_document.docx"  # SharePoint'ten indirilen dosya
    
    if not os.path.exists(test_file):
        print("Test dosyasÄ± bulunamadÄ±")
        return
    
    print("=== SHAREPOINT WORD FIX TEST ===")
    
    # Corruption kontrol et
    if SharePointWordFixer.is_sharepoint_corrupted(test_file):
        print("âœ“ SharePoint corruption tespit edildi")
        
        # DÃ¼zelt
        fixed_file = SharePointWordFixer.fix_sharepoint_docx(test_file)
        print(f"âœ“ DÃ¼zeltilmiÅŸ dosya: {fixed_file}")
        
        # Test et
        word_service = WordReaderService()
        success = word_service.load_document(fixed_file)
        print(f"âœ“ DÃ¼zeltilmiÅŸ dosya yÃ¼kleme: {'BaÅŸarÄ±lÄ±' if success else 'BaÅŸarÄ±sÄ±z'}")
    else:
        print("Dosya zaten saÄŸlam")
    
    # Normal servis ile test
    word_service = WordReaderService()
    data = word_service.extract_tables(test_file)
    print(f"âœ“ Ã‡Ä±karÄ±lan veri satÄ±rÄ±: {len(data) - 1 if data else 0}")

if __name__ == "__main__":
    test_sharepoint_fix()
