import random
import numpy as np

def generate_olcu_dataset(n=3000):
    """3000 örneklik gerçekçi ölçü verisi üretir"""
    
    dataset = []
    
    # 1. Geometrik Toleranslar (Form)
    form_templates = [
        "[ Straightness | {:.3f} ]",
        "[ STRAIGHTNESS | {:.2f} ]", 
        "[ Flatness | {:.3f} ]",
        "[ FLATNESS | {:.2f} ]",
        "[ Circularity | {:.3f} ]",
        "[ CIRCULARITY | {:.2f} ]",
        "[ Cylindricity | {:.3f} ]",
        "[ Straightness | ∅{:.2f} ]",
        "[ Flatness (M) | ∅{:.3f} (M) ]",
        "[ Straightness (L) | {:.2f} (L) ]",
        "[ FLATNESS (P) | {:.3f} (P) ]"
    ]
    
    # 2. Oryantasyon Toleransları
    orientation_templates = [
        "[ Perpendicularity | {:.2f} | {} ]",
        "[ PERPENDICULARITY | {:.3f} | {} ]",
        "[ Parallelism | {:.2f} | {} ]",
        "[ PARALLELISM | {:.3f} | {} ]",
        "[ Angularity | {:.2f} | {} ]",
        "[ ANGULARITY | {:.3f} | {} ]",
        "[ ANG | {:.2f} | {} ]",
        "[ Perpendicularity (M) | ∅{:.2f} (M) | {} (M) ]",
        "[ Parallelism (L) | {:.3f} (L) | {} (L) ]",
        "[ Angularity (P) | ∅{:.2f} (P) | {} ]"
    ]
    
    # 3. Lokasyon Toleransları
    location_templates = [
        "[ Position | ∅{:.2f} | {} ]",
        "[ POSITION | ∅{:.3f} | {} ]",
        "[ Position | ∅{:.2f} | {} | {} ]",
        "[ POSITION | ∅{:.3f} | {} | {} ]",
        "[ Position | ∅{:.2f} | {} | {} | {} ]",
        "[ True Position | ∅{:.2f} | {} ]",
        "[ TRUE POSITION | ∅{:.3f} | {} ]",
        "[ TP | ∅{:.2f} | {} ]",
        "[ Concentricity | ∅{:.2f} | {} ]",
        "[ CONCENTRICITY | ∅{:.3f} | {} ]",
        "[ Symmetry | {:.2f} | {} ]",
        "[ SYMMETRY | {:.3f} | {} ]",
        "[ Position (M) | ∅{:.2f} (M) | {} (M) ]"
    ]
    
    # 4. Profil Toleransları
    profile_templates = [
        "[ Profile of a Line | {:.2f} | {} ]",
        "[ PROFILE OF A LINE | {:.3f} | {} ]",
        "[ Profile of a Surface | {:.2f} | {} ]",
        "[ PROFILE OF A SURFACE | {:.3f} | {} ]",
        "[ LP | {:.2f} | {} ]",
        "[ SP | {:.3f} | {} ]",
        "[ Profile of a Line | {}(U){:.1f} | {} ]",
        "[ PROFILE OF A LINE | {}(U){:.2f} | {} ]",
        "[ Profile of a Surface (L) | {:.2f} (L) | {} ]"
    ]
    
    # 5. Runout Toleransları
    runout_templates = [
        "[ Circular Runout | {:.2f} | {} ]",
        "[ CIRCULAR RUNOUT | {:.3f} | {} ]",
        "[ Total Runout | {:.2f} | {} ]",
        "[ TOTAL RUNOUT | {:.3f} | {} ]",
        "[ Runout | {:.2f} | {} ]",
        "[ RUNOUT | {:.3f} | {} ]",
        "[ Total Runout | {:.2f} | {}-{} ]",
        "[ Circular Runout | {:.3f} | {}-{} ]"
    ]
    
    # 6. Boyutsal Toleranslar
    dimensional_templates = [
        "{:.2f}±{:.2f}",
        "{:.1f}±{:.3f}",
        "{:.3f} ± {:.2f}",
        "{:.1f} ± {:.1f}",
        "∅{:.2f}±{:.2f}",
        "∅{:.1f} ± {:.3f}",
        "R{:.1f}±{:.2f}",
        "R {:.2f} ± {:.1f}"
    ]
    
    # 7. Artı/Eksi Toleranslar
    plus_minus_templates = [
        "∅{:.1f} +{:.2f}/-{:.2f}",
        "∅{:.2f} +{:.3f}/-{:.1f}",
        "{:.1f} +{:.2f}/-{:.3f}",
        "{:.2f} +{:.1f}/-{:.2f}",
        "∅{:.1f} +/-{:.2f}",
        "{:.2f} +/-{:.1f}",
        "R{:.1f} +{:.2f}/-{:.1f}",
        "∅{:.1f}+{:.2f}/-{:.3f}"
    ]
    
    # 8. Max/Min Toleranslar
    max_min_templates = [
        "MAX {:.1f}",
        "max {:.2f}",
        "MAX {:.3f}",
        "R{:.1f} MAX",
        "R {:.2f} MAX",
        "∅{:.1f} MAX",
        "MIN {:.2f}",
        "min {:.1f}",
        "MIN R{:.2f}",
        "R{:.1f} MIN",
        "∅{:.2f} MIN"
    ]
    
    # 9. Derece Toleransları (YENİ)
    degree_templates = [
        "{:.0f}° ± {:.1f}°",
        "{:.1f}° ± {:.2f}°",
        "{:.0f}° +{:.1f}°/-{:.1f}°",
        "{:.1f}° +{:.2f}°/-{:.3f}°",
        "{:.0f}° MAX",
        "{:.1f}° MIN",
        "∅{:.1f} × {:.0f}°",
        "R{:.1f} × {:.0f}°"
    ]
    
    # 10. Diş Toleransları (YENİ)
    thread_templates = [
        "M{:.0f}x{:.1f} ± {:.2f}",
        "M{:.0f}×{:.1f} +{:.2f}/-{:.2f}",
        "M{:.0f}x{:.1f}-6H",
        "M{:.0f}×{:.1f}-6g",
        "G{:.0f}x{:.1f} ± {:.2f}",
        "G{:.0f}×{:.1f} +{:.2f}/-{:.2f}",
        "M{:.0f}x{:.1f} MAX {:.2f}",
        "M{:.0f}×{:.1f} MIN {:.2f}",
        "M{:.0f} ± {:.2f}",
        "G{:.0f} +{:.2f}/-{:.2f}"
    ]
    
    # 11. Özel Semboller (YENİ)
    symbol_templates = [
        "⏜ {:.2f}",
        "⟂ {:.3f}",
        "⌖ ∅{:.2f}",
        "∠ {:.2f}",
        "⏩ {:.3f}",
        "⌐ {:.2f}",
        "⌙ {:.3f}",
        "⊥ {:.2f}",
        "∥ {:.3f}",
        "⌒ {:.2f}"
    ]
    
    # 12. Karmaşık Formatlar (YENİ)
    complex_templates = [
        "{:.0f}x ∅{:.1f} ± {:.2f}",
        "{:.0f}× ∅{:.2f} +{:.2f}/-{:.1f}",
        "∅{:.1f} × {:.0f}° ± {:.2f}",
        "R{:.1f} BOTH SIDES ± {:.2f}",
        "{:.1f} ± {:.2f} °C",
        "∅{:.1f}⁺⁰·¹₋₀.₀₅",
        "{:.1f}₊₀.₂₋₀.₁",
        "∅{:.1f} REF",
        "{:.1f} TYP",
        "≈{:.1f} ± {:.2f}"
    ]
    
    # Değer aralıkları
    small_values = np.arange(0.01, 0.5, 0.01)
    medium_values = np.arange(0.5, 10, 0.1)
    large_values = np.arange(10, 500, 1)
    angles = np.arange(0, 360, 5)
    thread_sizes = [3, 4, 5, 6, 8, 10, 12, 16, 20, 24, 30, 36, 42, 48]
    thread_pitches = [0.5, 0.7, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.5, 3.0]
    references = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
    
    # Template'leri ve ağırlıklarını birleştir
    all_templates = [
        (form_templates, 400),          # 400 örnek
        (orientation_templates, 350),    # 350 örnek  
        (location_templates, 300),       # 300 örnek
        (profile_templates, 200),        # 200 örnek
        (runout_templates, 150),         # 150 örnek
        (dimensional_templates, 400),    # 400 örnek
        (plus_minus_templates, 350),     # 350 örnek
        (max_min_templates, 200),        # 200 örnek
        (degree_templates, 200),         # 200 örnek (YENİ)
        (thread_templates, 250),         # 250 örnek (YENİ)
        (symbol_templates, 100),         # 100 örnek (YENİ)
        (complex_templates, 100)         # 100 örnek (YENİ)
    ]
    
    for templates, count in all_templates:
        for _ in range(count):
            template = random.choice(templates)
            
            # Template'e göre değer üretimi
            if 'degree' in str(templates) or '°' in template:
                # Derece değerleri
                angle = random.choice(angles)
                tol = random.choice(small_values)
                try:
                    if template.count('{}') == 2:
                        sample = template.format(angle, tol)
                    elif template.count('{}') == 4:
                        sample = template.format(angle, tol, tol)
                    else:
                        sample = template.format(angle)
                except:
                    sample = template.format(angle, tol) if '{}' in template else template
                    
            elif 'thread' in str(templates) or 'M' in template or 'G' in template:
                # Diş değerleri
                size = random.choice(thread_sizes)
                pitch = random.choice(thread_pitches)
                tol = random.choice(small_values)
                try:
                    if template.count('{}') == 3:
                        sample = template.format(size, pitch, tol)
                    elif template.count('{}') == 4:
                        sample = template.format(size, pitch, tol, tol)
                    else:
                        sample = template.format(size, pitch)
                except:
                    sample = template.format(size, pitch, tol) if '{}' in template else template
                    
            elif any(word in template for word in ['Position', 'POSITION', 'Perpendicularity', 'PERPENDICULARITY', 'Parallelism', 'Angularity']):
                # Referans gerektiren toleranslar
                tol = random.choice(small_values)
                ref1 = random.choice(references)
                ref2 = random.choice([r for r in references if r != ref1])
                ref3 = random.choice([r for r in references if r not in [ref1, ref2]])
                
                try:
                    param_count = template.count('{}')
                    if param_count == 2:
                        sample = template.format(tol, ref1)
                    elif param_count == 3:
                        sample = template.format(tol, ref1, ref2)
                    elif param_count == 4:
                        sample = template.format(tol, ref1, ref2, ref3)
                    else:
                        sample = template.format(tol)
                except:
                    sample = template.format(tol, ref1)
                    
            elif 'Profile' in template and '(U)' in template:
                # Unilateral profil toleransları
                main_tol = random.choice(medium_values)
                u_tol = random.choice(small_values)
                ref = random.choice(references)
                try:
                    sample = template.format(main_tol, u_tol, ref)
                except:
                    sample = template.format(main_tol, u_tol)
                    
            else:
                # Diğer tüm durumlar
                if random.random() < 0.3:
                    value1 = random.choice(small_values)
                elif random.random() < 0.6:
                    value1 = random.choice(medium_values)
                else:
                    value1 = random.choice(large_values)
                
                value2 = random.choice(small_values)
                value3 = random.choice(small_values)
                ref = random.choice(references)
                
                try:
                    param_count = template.count('{}')
                    if param_count == 0:
                        sample = template
                    elif param_count == 1:
                        sample = template.format(value1)
                    elif param_count == 2:
                        if any(x in template for x in ['|', 'Runout', 'RUNOUT']):
                            sample = template.format(value1, ref)
                        else:
                            sample = template.format(value1, value2)
                    elif param_count == 3:
                        sample = template.format(value1, value2, value3)
                    else:
                        sample = template.format(value1, value2, value3, ref)
                except:
                    sample = template.format(value1) if '{}' in template else template
            
            dataset.append(sample)
    
    # Listeyi karıştır
    random.shuffle(dataset)
    
    # Tam 3000 örnek olduğundan emin ol
    if len(dataset) > n:
        dataset = dataset[:n]
    elif len(dataset) < n:
        # Eksik varsa rastgele örnekleri tekrarla
        while len(dataset) < n:
            dataset.append(random.choice(dataset))
    
    return dataset

# 3000 örneklik dataset oluştur
if __name__ == "__main__":
    olcu_dataset = generate_olcu_dataset(3000)
    
    print(f"Toplam {len(olcu_dataset)} örnek oluşturuldu!")
    print("\n--- İLK 20 ÖRNEK ---")
    for i, example in enumerate(olcu_dataset[:20], 1):
        print(f"{i:2d}. {example}")
    
    print("\n--- SON 10 ÖRNEK ---")
    for i, example in enumerate(olcu_dataset[-10:], len(olcu_dataset)-9):
        print(f"{i:4d}. {example}")
    
    # Kategori dağılımını kontrol et
    categories = {
        'Geometrik (Köşeli parantez)': 0,
        'Boyutsal (± işareti)': 0, 
        'Artı/Eksi (+/- işareti)': 0,
        'Max/Min': 0,
        'Derece (° işareti)': 0,
        'Diş (M/G harfi)': 0,
        'Sembol (⏜⟂⌖ vb.)': 0,
        'Karmaşık': 0
    }
    
    for example in olcu_dataset:
        if example.startswith('[') and example.endswith(']'):
            categories['Geometrik (Köşeli parantez)'] += 1
        elif '±' in example and not ('°' in example or 'M' in example or 'G' in example):
            categories['Boyutsal (± işareti)'] += 1
        elif '+' in example and '-' in example and not ('°' in example):
            categories['Artı/Eksi (+/- işareti)'] += 1
        elif 'MAX' in example.upper() or 'MIN' in example.upper():
            categories['Max/Min'] += 1
        elif '°' in example:
            categories['Derece (° işareti)'] += 1
        elif 'M' in example or 'G' in example:
            categories['Diş (M/G harfi)'] += 1
        elif any(symbol in example for symbol in ['⏜', '⟂', '⌖', '∠', '⏩', '⌐', '⌙']):
            categories['Sembol (⏜⟂⌖ vb.)'] += 1
        else:
            categories['Karmaşık'] += 1
    
    print("\n--- KATEGORİ DAĞILIMI ---")
    for category, count in categories.items():
        percentage = (count/len(olcu_dataset))*100
        print(f"{category}: {count} örnek (%{percentage:.1f})")
